"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'jazzmin',  # Admin theme
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # App di terze parti
    'easy_thumbnails',  # Per thumbnail automatici
    'filer',            # Media manager
    'mptt',             # Modified Preorder Tree Traversal (gestione strutture ad albero) server per filer
    'rest_framework',  # API REST
    'rest_framework_simplejwt',  # JWT Auth per DRF
    'rest_framework_simplejwt.token_blacklist',  # Per invalidare token JWT e crea tabelle DB per tracciare toker revocati
    'corsheaders',      # Gestione CORS
    'debug_toolbar',  # Debug toolbar
    # App
    'catalogo',
    'utenti',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Debug toolbar
    'corsheaders.middleware.CorsMiddleware',  # CORS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INTERNAL_IPS = [
    '127.0.0.1',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Aggiungi directory templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'it-it'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Filer Settings
FILER_ENABLE_PERMISSIONS = False  # Usa solo permessi Django standard
FILER_CANONICAL_URL = 'filer/'   # URL base Filer nell'admin
THUMBNAIL_HIGH_RESOLUTION = True  # Thumbnail alta qualità
THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)

# Organizzazione file Filer per data (Anno/Mese/Giorno)
FILER_STORAGES = {
    'public': {
        'main': {
            'ENGINE': 'filer.storage.PublicFileSystemStorage',
            'OPTIONS': {
                'location': os.path.join(MEDIA_ROOT, 'filer_public'),
                'base_url': '/media/filer_public/',
            },
            'UPLOAD_TO': 'filer.utils.generate_filename.by_date',
        },
    },
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [ #Ordine importante prima JWT poi session
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT -> cerca tocken JWT nell'header Authorization
        'rest_framework.authentication.SessionAuthentication',        # Session (per admin) -> cerca session cookie
    ],
    
    # Di deafult tute le API richiedono login -> Senza non si può accedere
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Default: richiede login
    ],

    # Paginazione di default
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,

    # Renderer (formato risposta) - Diversi per sviluppo e produzione
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # API navigabile dal browser -> Solo in sviluppo
    ] if os.environ.get('DEBUG', 'True') == 'True' else [
        'rest_framework.renderers.JSONRenderer',  # Solo JSON in produzione
    ],
}

# Configurazione Simple JWT
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_MINUTES', default=60, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=config('JWT_REFRESH_TOKEN_DAYS', default=7, cast=int)),
    'ROTATE_REFRESH_TOKENS': True, # Genera nuovo refresh ad ogni refresh
    'BLACKLIST_AFTER_ROTATION': True, # Invalida vecchio refresh token
    'UPDATE_LAST_LOGIN': True, # Aggiorna last_login in User model
    
    'ALGORITHM': 'HS256', # Algoritmo crittografia
    'SIGNING_KEY': SECRET_KEY, # Usa SECRET_KEY Django
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',), # Header: "Authorization: Bearer {token}"
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS Configuration
# Sviluppo: permetti tutti i domini (comodo per testing)
# Produzione: solo domini specifici (sicuro)
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)

# Se CORS_ALLOW_ALL_ORIGINS è False, usa questa lista
if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default='',
        cast=Csv()
    )

#Permetti credenziali (cookie, auth headers)
CORS_ALLOW_CREDENTIALS = True

# Metodi HTTP permessi
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Header permessi nelle richieste
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Jazzmin Admin Theme Configuration
JAZZMIN_SETTINGS = {
    "site_title": " Catalog Admin",
    "site_header": "Catalog Application",
    "site_brand": "Catalog",
    "welcome_sign": "Benvenuto nel pannello amministrativo Catalog",
    
    # Logo
    "site_logo": None,  # Puoi aggiungere path al logo
    
    # Theme colori (verde)
    "theme": "flatly",  # Bootstrap theme base
    
    # Colori custom
    "custom_css": None,
    "custom_js": None,
    
    # Sidebar
    "show_sidebar": True,
    "navigation_expanded": True,
    
    # Top menu
    "topmenu_links": [
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "Sito", "url": "/", "new_window": True},
    ],
    
    # Icone
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "catalogo.catalogo": "fas fa-folder",
        "catalogo.categoria": "fas fa-list",
        "catalogo.cartelle": "fas fa-file-alt",
        "filer.folder": "fas fa-folder-open",
    },
    
    # Colori tema (verde)
    "custom_css": None,
    "custom_js": None,
}

JAZZMIN_UI_TWEAKS = {
    "theme": "flatly",
    "dark_mode_theme": None,
}